// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	entities "github.com/KonstantinGalanin/itemStore/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockUserRepo) Auth(userName, password string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", userName, password)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockUserRepoMockRecorder) Auth(userName, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockUserRepo)(nil).Auth), userName, password)
}

// BuyItem mocks base method.
func (m *MockUserRepo) BuyItem(userID, itemID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", userID, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockUserRepoMockRecorder) BuyItem(userID, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockUserRepo)(nil).BuyItem), userID, itemID)
}

// GetCoinsInfo mocks base method.
func (m *MockUserRepo) GetCoinsInfo(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinsInfo", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinsInfo indicates an expected call of GetCoinsInfo.
func (mr *MockUserRepoMockRecorder) GetCoinsInfo(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinsInfo", reflect.TypeOf((*MockUserRepo)(nil).GetCoinsInfo), userID)
}

// GetInventoryInfo mocks base method.
func (m *MockUserRepo) GetInventoryInfo(userID int) ([]*entities.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventoryInfo", userID)
	ret0, _ := ret[0].([]*entities.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventoryInfo indicates an expected call of GetInventoryInfo.
func (mr *MockUserRepoMockRecorder) GetInventoryInfo(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventoryInfo", reflect.TypeOf((*MockUserRepo)(nil).GetInventoryInfo), userID)
}

// GetItemID mocks base method.
func (m *MockUserRepo) GetItemID(itemName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemID", itemName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemID indicates an expected call of GetItemID.
func (mr *MockUserRepoMockRecorder) GetItemID(itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemID", reflect.TypeOf((*MockUserRepo)(nil).GetItemID), itemName)
}

// GetReceiveInfo mocks base method.
func (m *MockUserRepo) GetReceiveInfo(userID int) ([]*entities.ReceiveOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiveInfo", userID)
	ret0, _ := ret[0].([]*entities.ReceiveOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiveInfo indicates an expected call of GetReceiveInfo.
func (mr *MockUserRepoMockRecorder) GetReceiveInfo(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiveInfo", reflect.TypeOf((*MockUserRepo)(nil).GetReceiveInfo), userID)
}

// GetSentInfo mocks base method.
func (m *MockUserRepo) GetSentInfo(userID int) ([]*entities.SentOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentInfo", userID)
	ret0, _ := ret[0].([]*entities.SentOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentInfo indicates an expected call of GetSentInfo.
func (mr *MockUserRepoMockRecorder) GetSentInfo(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentInfo", reflect.TypeOf((*MockUserRepo)(nil).GetSentInfo), userID)
}

// GetUserID mocks base method.
func (m *MockUserRepo) GetUserID(userName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", userName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockUserRepoMockRecorder) GetUserID(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockUserRepo)(nil).GetUserID), userName)
}

// SendCoin mocks base method.
func (m *MockUserRepo) SendCoin(fromUserID, toUserID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoin", fromUserID, toUserID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoin indicates an expected call of SendCoin.
func (mr *MockUserRepoMockRecorder) SendCoin(fromUserID, toUserID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoin", reflect.TypeOf((*MockUserRepo)(nil).SendCoin), fromUserID, toUserID, amount)
}
