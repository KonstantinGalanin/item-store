// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	entities "github.com/KonstantinGalanin/itemStore/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockJwtService is a mock of JwtService interface.
type MockJwtService struct {
	ctrl     *gomock.Controller
	recorder *MockJwtServiceMockRecorder
}

// MockJwtServiceMockRecorder is the mock recorder for MockJwtService.
type MockJwtServiceMockRecorder struct {
	mock *MockJwtService
}

// NewMockJwtService creates a new mock instance.
func NewMockJwtService(ctrl *gomock.Controller) *MockJwtService {
	mock := &MockJwtService{ctrl: ctrl}
	mock.recorder = &MockJwtServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtService) EXPECT() *MockJwtServiceMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockJwtService) CreateToken(userItem *entities.User) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", userItem)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockJwtServiceMockRecorder) CreateToken(userItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockJwtService)(nil).CreateToken), userItem)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockUserService) Auth(userName, password string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", userName, password)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockUserServiceMockRecorder) Auth(userName, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockUserService)(nil).Auth), userName, password)
}

// BuyItem mocks base method.
func (m *MockUserService) BuyItem(userName, itemName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", userName, itemName)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockUserServiceMockRecorder) BuyItem(userName, itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockUserService)(nil).BuyItem), userName, itemName)
}

// GetInfo mocks base method.
func (m *MockUserService) GetInfo(userName string) (*entities.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", userName)
	ret0, _ := ret[0].(*entities.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockUserServiceMockRecorder) GetInfo(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockUserService)(nil).GetInfo), userName)
}

// SendCoin mocks base method.
func (m *MockUserService) SendCoin(fromUser, toUser string, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoin", fromUser, toUser, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoin indicates an expected call of SendCoin.
func (mr *MockUserServiceMockRecorder) SendCoin(fromUser, toUser, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoin", reflect.TypeOf((*MockUserService)(nil).SendCoin), fromUser, toUser, amount)
}
